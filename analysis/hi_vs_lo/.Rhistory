select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by(part, sex) %>%
mutate(total = sum(count),
prop = count / total) %>%
print
submit()
clear()
library(ggplot2)
variantData <- read.delim("http://genomedata.org/gen-viz-workshop/intro_to_ggplot2/ggplot2ExampleData.tsv")
head(variantData)
variantData$tumor_COV <- variantData$tumor_ref_count + variantData$tumor_var_count
p1 <- ggplot(data=variantData, aes(x=tumor_VAF, y=tumor_COV))
p1
p1 = p1 + geom_point()
p1
read.csv(file = '~/Documents/PhD/Schorn_lab/Matty_P/AGO2_KD_#4/Transposition_assay/21-02-25/AGO2_KD_#4_Colony_counts')
df = read.csv(file = '~/Documents/PhD/Schorn_lab/Matty_P/AGO2_KD_#4/Transposition_assay/21-02-25_AGO2_KD_#4_Colony_counts')
df = read.csv(file = '~/Documents/PhD/Schorn_lab/Matty_P/AGO2_KD_#4/Transposition_assay/21-02-25_AGO2_KD_#4_Colony_counts.csv')
df
df = filter(df, Sample != GFP)
filter(df, Sample != 'GFP')
df = filter(df, Sample != 'GFP')
?ggplot
ggplot(data = df, aes(x = Sample, y = Colonies))
ggplot(data = df, aes(x = Sample, y = Colonies, fill = MusD))
ggplot(data = df, aes(x = Sample, y = Colonies, fill = MusD)) +
geom_point()
ggplot(data = df, aes(x = Sample, y = Colonies, fill = MusD)) +
geom_point(position = 'dodge')
?geom_point
ggplot(data = df, aes(x = Sample, y = Colonies, fill = MusD)) +
geom_point(position = 'dodge', position_dodge(width = 5))
ggplot(data = df, aes(x = Sample, y = Colonies, fill = MusD)) +
geom_point(position = 'dodge')
ggplot(data = df, aes(x = Sample, y = Colonies, fill = MusD)) +
geom_col(position = 'dodge')
lapply(.libPaths(), dir)
ggplot(data = df, aes(x = Sample, y = Colonies, fill = MusD)) +
geom_col(position = 'dodge') +
scale_fill_brewer(palette="Set1")
?theme_set
ggplot(data = df, aes(x = Sample, y = Colonies, fill = MusD)) +
geom_col(position = 'dodge') +
scale_fill_brewer(palette="Set1") +
theme_classic()
ggplot(data = df, aes(x = Sample, y = Colonies, fill = MusD)) +
geom_col(position = 'dodge') +
geom_point()
scale_fill_brewer(palette="Set1") +
theme_classic()
ggplot(data = df, aes(x = Sample, y = Colonies, fill = MusD)) +
geom_col(position = 'dodge') +
geom_point() +
scale_fill_brewer(palette="Set1") +
theme_classic()
ggplot(data = df, aes(x = Sample, y = Colonies, fill = MusD)) +
geom_col(position = 'dodge') +
geom_point(position = 'dodge') +
scale_fill_brewer(palette="Set1") +
theme_classic()
library(swirl)
library(BiocSwirl)
load_course()
swirl()
install.packages('pheatmap')
install.packages('BiocManager')
BiocManager::install('DESeq2')
library(pheatmap)
library(DESeq2)
browseVignettes(DESeq2)
browseVignettes('DESeq2')
citation(DESeq2)
citation('DESeq2')
library(swirl)
library(BiocSwirl)
swirl()
110
24
bye()
library(swirl)
library(BiocSwirl)
swirl()
0
bye()
swirl
swilr()
swirl()
bye(0)
bye()
swirl()
24
library(swirl)
library(BiocSwirl)
swirl()
bye()
swirl
swirl()
swirl()
library(swirl)
library(BiocSwirl)
swirl()
res
bye()
swirl()
res_dds
DESeq(dds)
res_dds <- DESeq(dds)
res <- results(res_dds)
head(res)
mcols(res)
summary(res)
res
library(dplyr)
filter(res, padj < 0.1)
type(res)
res
filter(res, padj < 0.1)
class(res)
View(anno_data)
res_sig <- subset(res, padj < 0.1)
?subset
order(res_sig, log2FoldChange)
?order()
?order
play()
res
library(dplyr)
filter(data = res, baseMean > 20)
filter(res, baseMean > 20)
tbl_df(res)
tbl_df(res) %>% filter(baseMean > 20)
tbl_df(res) %>% filter(baseMean < 20)
tbl_df(res) %>% filter(padj < 0.1)
res
plotMA(res)
swirl()
tbl_df(res) %>% filter(basemean < 1) %>% hist(res$pvalue)
tbl_df(res) %>% filter(baseMean < 1) %>% hist(res$pvalue)
tbl_df(res) %>% filter(baseMean < 1) %>% hist()
tbl_df(res) %>% filter(baseMean > 1)
tbl_df(res) %>% filter(baseMean > 1)
libray(ggplot2)
library(ggplot2)
df = tbl_df(res) %>% filter(baseMean > 1)
ggplot(dfm aes(x = padj)) + geom_histogram()
ggplot(df, aes(x = padj)) + geom_histogram()
library(readr)
play()
write_csv(res, 'deseq_example.csv')
write_csv(as.data.frame(res), "deseq_example.csv" )
getwed()
getwd()
df = as.data.frame(res)
rownames(df) <- NULL
df
df = as.data.frame(res)
df
df <- cbind(newColName = rownames(df), df)
rownames(df) <- 1:nrow(df)
df
df
write_csv(df, "deseq_example.csv" )
df %>% rename(newColName = gene)
df %>% rename(gene = newColName)
df
head(dd)
head(df)
names(df)[names(df) == "newColName"] <- "gene"
df
head(df)
write_csv(df, "deseq_example.csv" )
swirl()
skip()
res
df
plotCounts(dds, gene = "IL6")
View(res)
res_shrink <- lfcShrink(res_dds, coef = 'condition_treatment_vs_mock', type = 'apeglm')
res_shrink
plotMA(res_shrink, ylim = c(-5, 5))
plot(res)
plot(data = res)
res
plot(data = res, x = log2FoldChange, y = pvalue)
plot(data = res, x = 'log2FoldChange', y = 'pvalue')
plot(x=res$log2FoldChange, y=-log2(res$padj))
skip()
skip()
skip()
skip()
skip()
swirl()
library(swirl)
library(BiocSwirl)
swirl()
swirl()
colData
dataset
View(colData)
View(colData)
dds <- DESeqDataSetFromMatrix(dataset, colData, design= ~ condition)
head(dataset)
head(assay(dds))
library(dplyr)
keep <- rowSums(counts(dds)) > 1
keep
skip()
skip()
15
sampleDist <- dist(t(assay(dds)))
sampleDist <- dist(t(assay(rlog_dds)))
sampleDist
d
sampleDist
skip
skip()
skip()
skip()
skip()
plotPCA(rlog_dds)
plotPCA(rlog_dds) + theme_classic()
plotPCA(rlog_dds) + theme_minimal()
plotPCA(rlog_dds) + theme_bw()
rlog(dds)
swirl()
swirl()
skip()
?plotCounts()
plotCounts(dds, IL6)
skip()
dds
res
counts(dds, normalized=T)
counts(dds, normalized=TRUE)
counts(dds, normalized=FALSE)
swirl()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
topgenes
topGenes
anno_data
pheatmap(topGenes, annotation_col = anno_data)
skip()
skip()
head(res)
skip()
skip()
skip()
skip()
skip()
getwd()
setwd("/Users/mpeacey/TE_thymus/analysis/hi_vs_lo)
setwd("/Users/mpeacey/TE_thymus/analysis/hi_vs_lo")
setwd("/Users/mpeacey/TE_thymus/analysis/hi_vs_lo")
library(dplyr)
library(readr)
library(tidyr)
library(DESeq2)
## Import count matrix
data = read.table("hi_vs_lo.cntTable",header=T,row.names=1)
## Filter count matrix to exclude non-expressed genes
min_read = 1
data <- data[apply(data,1,function(x){max(x)}) > min_read,]
## Subset into 'gene' and 'TE' count matrices
gene_data = data[grep("^ENSG",rownames(data)),]
TE_data = data[grepl("^(?!ENSG).*$",rownames(data), perl = TRUE),]
## Convert 'gene_ID' to 'gene_name' from GTF file
GENCODE_annotation = read.table(file = 'gencode.v38_gene_annotation_table.txt')
View(GENCODE_annotation)
View(GENCODE_annotation)
GENCODE_annotation = read.table(file = 'gencode.v38_gene_annotation_table.txt', header = 1)
View(gene_data)
View(gene_data)
library(dplyr)
library(readr)
library(tidyr)
library(DESeq2)
## Import count matrix
data = read.table("hi_vs_lo.cntTable",header=T,row.names=1)
## Convert 'gene_ID' to 'gene_name' from GTF file
GENCODE_annotation = read.table(file = 'gencode.v38_gene_annotation_table.txt', header = 1)
library(dplyr)
library(readr)
library(tidyr)
library(DESeq2)
## Import count matrix
data = read.table("hi_vs_lo.cntTable",header=T,row.names=1)
## Subset into 'gene' and 'TE' count matrices
gene_data = data[grep("^ENSG",rownames(data)),]
TE_data = data[grepl("^(?!ENSG).*$",rownames(data), perl = TRUE),]
## Convert 'gene_ID' to 'gene_name' from GTF file
GENCODE_annotation = read.table(file = 'gencode.v38_gene_annotation_table.txt', header = 1)
library(dplyr)
library(readr)
library(tidyr)
library(DESeq2)
## Import count matrix
data = read.table("hi_vs_lo.cntTable",header=T,row.names=1)
## Subset into 'gene' and 'TE' count matrices
gene_data = data[grep("^ENSG",rownames(data)),]
TE_data = data[grepl("^(?!ENSG).*$",rownames(data), perl = TRUE),]
## Convert 'gene_ID' to 'gene_name' from GTF file
GENCODE_annotation = read.table(file = 'gencode.v38_gene_annotation_table.txt', header = 1)
## Filter count matrix to exclude non-expressed genes
min_read = 1
gene_data <- gene_data[apply(gene_data,1,function(x){max(x)}) > min_read,]
## Define sampleInfo
ID = colnames(gene_data)
sampleInfo = data.frame(ID,row.names=colnames(gene_data))
sampleInfo = suppressWarnings(separate(sampleInfo, col = ID, into = c('patient', 'group'), sep = '_'))
## Construct DESeq dataset object
dds <- DESeqDataSetFromMatrix(countData = gene_data, colData = sampleInfo, design = ~group+patient)
#dds$groups = relevel(dds$groups,ref="mTEC_lo")
## Run differential expression analysis
dds <- DESeq(dds)
res <- results(dds,independentFiltering=F)
## Transform raw count data
vs_dds <- vst(dds, blind=FALSE)
res
vs_dds
counts(dds, normalized=T
d
counts(dds, normalized=T)
head(counts(dds, normalized=T))
head(counts(vs_dds, normalized=F))
counts(vs_dds, normalized=F))
counts(vs_dds, normalized=F)
gene_data <- cbind(Geneid = rownames(gene_data), gene_data)
dds <- DESeqDataSetFromMatrix(countData = gene_data, colData = sampleInfo, design = ~group+patient)
#dds$groups = relevel(dds$groups,ref="mTEC_lo")
## Run differential expression analysis
dds <- DESeq(dds)
res <- results(dds,independentFiltering=F)
res
merge(gene_data, GENCODE_annotation, by = 'Geneid')
gene_data = merge(gene_data, GENCODE_annotation, by = 'Geneid')
dds <- DESeqDataSetFromMatrix(countData = gene_data, colData = sampleInfo, design = ~group+patient)
#dds$groups = relevel(dds$groups,ref="mTEC_lo")
## Run differential expression analysis
dds <- DESeq(dds)
res <- results(dds,independentFiltering=F)
res
rownames(gene_data) = gene_data$GeneSymbol
gene_data$GeneSymbol == ‘SNORA50A’
filter(gene_data, GeneSymbol == ‘SNORA50A’)
filter(gene_data)
filter(gene_data, chromosome == 'chrX')
filter(gene_data, Chromosome == 'chrX')
filter(gene_data, GeneSymbol == 'TSPAN6')
filter(gene_data, GeneSymbol == 'AIRE')
filter(gene_data, GeneSymbol == 'DDX11L16')
library(dplyr)
library(readr)
library(tidyr)
library(DESeq2)
## Import count matrix
data = read.table("hi_vs_lo.cntTable",header=T,row.names=1)
## Subset into 'gene' and 'TE' count matrices
gene_data = data[grep("^ENSG",rownames(data)),]
TE_data = data[grepl("^(?!ENSG).*$",rownames(data), perl = TRUE),]
## Convert 'gene_ID' to 'gene_name' from GTF file
GENCODE_annotation = read.table(file = 'gencode.v38_gene_annotation_table.txt', header = 1)
## Filter count matrix to exclude non-expressed genes
min_read = 1
gene_data <- gene_data[apply(gene_data,1,function(x){max(x)}) > min_read,]
## Define sampleInfo
ID = colnames(gene_data)
sampleInfo = data.frame(ID,row.names=colnames(gene_data))
sampleInfo = suppressWarnings(separate(sampleInfo, col = ID, into = c('patient', 'group'), sep = '_'))
## Modify gene_data
gene_data <- cbind(Geneid = rownames(gene_data), gene_data)
gene_data = merge(gene_data, GENCODE_annotation, by = 'Geneid')
#rownames(gene_data) = gene_data$GeneSymbol Doesn't work because some gene IDs are not unique!
## Construct DESeq dataset object
dds <- DESeqDataSetFromMatrix(countData = gene_data, colData = sampleInfo, design = ~group+patient)
#dds$groups = relevel(dds$groups,ref="mTEC_lo")
## Run differential expression analysis
dds <- DESeq(dds)
res <- results(dds,independentFiltering=F)
## Transform raw count data
vs_dds <- vst(dds, blind=FALSE)
library(dplyr)
library(readr)
library(tidyr)
library(DESeq2)
## Import count matrix
data = read.table("hi_vs_lo.cntTable",header=T,row.names=1)
## Subset into 'gene' and 'TE' count matrices
gene_data = data[grep("^ENSG",rownames(data)),]
TE_data = data[grepl("^(?!ENSG).*$",rownames(data), perl = TRUE),]
## Convert 'gene_ID' to 'gene_name' from GTF file
GENCODE_annotation = read.table(file = 'gencode.v38_gene_annotation_table.txt', header = 1)
## Filter count matrix to exclude non-expressed genes
min_read = 1
gene_data <- gene_data[apply(gene_data,1,function(x){max(x)}) > min_read,]
## Define sampleInfo
ID = colnames(gene_data)
sampleInfo = data.frame(ID,row.names=colnames(gene_data))
sampleInfo = suppressWarnings(separate(sampleInfo, col = ID, into = c('patient', 'group'), sep = '_'))
## Modify gene_data
gene_data <- cbind(Geneid = rownames(gene_data), gene_data)
gene_data = merge(gene_data, GENCODE_annotation, by = 'Geneid')
#rownames(gene_data) = gene_data$GeneSymbol Doesn't work because some gene IDs are not unique!
## Construct DESeq dataset object
dds <- DESeqDataSetFromMatrix(countData = gene_data, colData = sampleInfo, design = ~group+patient)
#dds$groups = relevel(dds$groups,ref="mTEC_lo")
## Run differential expression analysis
dds <- DESeq(dds)
res <- results(dds,independentFiltering=F)
## Transform raw count data
vs_dds <- vst(dds, blind=FALSE)
library(dplyr)
library(readr)
library(tidyr)
library(DESeq2)
## Import count matrix
data = read.table("hi_vs_lo.cntTable",header=T,row.names=1)
## Subset into 'gene' and 'TE' count matrices
gene_data = data[grep("^ENSG",rownames(data)),]
TE_data = data[grepl("^(?!ENSG).*$",rownames(data), perl = TRUE),]
## Convert 'gene_ID' to 'gene_name' from GTF file
GENCODE_annotation = read.table(file = 'gencode.v38_gene_annotation_table.txt', header = 1)
## Filter count matrix to exclude non-expressed genes
min_read = 1
gene_data <- gene_data[apply(gene_data,1,function(x){max(x)}) > min_read,]
## Define sampleInfo
ID = colnames(gene_data)
sampleInfo = data.frame(ID,row.names=colnames(gene_data))
sampleInfo = suppressWarnings(separate(sampleInfo, col = ID, into = c('patient', 'group'), sep = '_'))
## Modify gene_data
#gene_data <- cbind(Geneid = rownames(gene_data), gene_data)
#gene_data = merge(gene_data, GENCODE_annotation, by = 'Geneid')
#rownames(gene_data) = gene_data$GeneSymbol Doesn't work because some gene IDs are not unique!
## Construct DESeq dataset object
dds <- DESeqDataSetFromMatrix(countData = gene_data, colData = sampleInfo, design = ~group+patient)
#dds$groups = relevel(dds$groups,ref="mTEC_lo")
## Run differential expression analysis
dds <- DESeq(dds)
res <- results(dds,independentFiltering=F)
## Transform raw count data
vs_dds <- vst(dds, blind=FALSE)
library(ggplot2)
plotCounts(dds, gene = 'ENSG00000160224.17', intgroup = 'group')
par(mfrow=c(2,3)
plotCounts(dds, gene = 'ENSG00000160224.17', intgroup = 'group')
par(mfrow=c(2,3))
plotCounts(dds, gene = 'ENSG00000160224.17', intgroup = 'group')
plotPCA(vs_dds, intgroup = 'group') + theme_bw()
par(mfrow=c(2,1))
plotCounts(dds, gene = 'ENSG00000160224.17', intgroup = 'group') ## AIRE
plotCounts(dds, gene = 'ENSG00000160224.17', intgroup = 'group') ##
par(mfrow=c(1,2))
plotCounts(dds, gene = 'ENSG00000160224.17', intgroup = 'group') ## AIRE
plotCounts(dds, gene = 'ENSG00000160224.17', intgroup = 'group') ##
plotCounts(dds, gene = 'ENSG00000160224.17', intgroup = 'group') ## AIRE
plotCounts(dds, gene = 'ENSG00000121594', intgroup = 'group') ## CD80
library(dplyr)
library(readr)
library(tidyr)
library(DESeq2)
## Import count matrix
data = read.table("hi_vs_lo.cntTable",header=T,row.names=1)
## Subset into 'gene' and 'TE' count matrices
gene_data = data[grep("^ENSG",rownames(data)),]
TE_data = data[grepl("^(?!ENSG).*$",rownames(data), perl = TRUE),]
## Convert 'gene_ID' to 'gene_name' from GTF file
GENCODE_annotation = read.table(file = 'gencode.v38_gene_annotation_table.txt', header = 1)
## Filter count matrix to exclude non-expressed genes
min_read = 1
gene_data <- gene_data[apply(gene_data,1,function(x){max(x)}) > min_read,]
## Define sampleInfo
ID = colnames(gene_data)
sampleInfo = data.frame(ID,row.names=colnames(gene_data))
sampleInfo = suppressWarnings(separate(sampleInfo, col = ID, into = c('patient', 'group'), sep = '_'))
## Modify gene_data
#gene_data <- cbind(Geneid = rownames(gene_data), gene_data)
#gene_data = merge(gene_data, GENCODE_annotation, by = 'Geneid')
#rownames(gene_data) = gene_data$GeneSymbol
# Doesn't work because some gene IDs are not unique!
## Construct DESeq dataset object
dds <- DESeqDataSetFromMatrix(countData = gene_data, colData = sampleInfo, design = ~group+patient)
#dds$groups = relevel(dds$groups,ref="mTEC_lo")
## Run differential expression analysis
dds <- DESeq(dds)
res <- results(dds,independentFiltering=F)
## Transform raw count data
vs_dds <- vst(dds, blind=FALSE)
par(mfrow=c(1,2))
plotCounts(dds, gene = 'ENSG00000160224.17', intgroup = 'group') ## AIRE
plotCounts(dds, gene = 'ENSG00000121594', intgroup = 'group') ## CD80
gene_data <- cbind(Geneid = rownames(gene_data), gene_data)
gene_data = merge(gene_data, GENCODE_annotation, by = 'Geneid')
filter(gene_data, GeneSymbol == 'CD80')
par(mfrow=c(1,2))
plotCounts(dds, gene = 'ENSG00000160224.17', intgroup = 'group') ## AIRE
plotCounts(dds, gene = 'ENSG00000121594.12', intgroup = 'group') ## CD80
filter(gene_data, GeneSymbol == 'FEZF2')
par(mfrow=c(2,2))
plotCounts(dds, gene = 'ENSG00000160224.17', intgroup = 'group') ## AIRE
plotCounts(dds, gene = 'ENSG00000121594.12', intgroup = 'group') ## CD80
plotCounts(dds, gene = 'ENSG00000153266.13', intgroup = 'group') ## FEZF2
res
