x = 'log2FoldChange',
y = 'padj',
title = 'mTEC-lo vs mTEC-hi gene expression',
pCutoff = 0.1)
EnhancedVolcano(df,
lab = rownames(df),
selectLab = c('ENSG00000160224.17'),
x = 'log2FoldChange',
y = 'padj',
title = 'mTEC-lo vs mTEC-hi gene expression',
pCutoff = 0.1)
EnhancedVolcano(df,
lab = rownames(df),
selectLab = c('ENSG00000160224.17', 'ENSG00000121594.12'),
x = 'log2FoldChange',
y = 'padj',
title = 'mTEC-lo vs mTEC-hi gene expression',
pCutoff = 0.1)
EnhancedVolcano(df,
lab = rownames(df),
selectLab = c('ENSG00000160224.17', 'ENSG00000121594.12'),
x = 'log2FoldChange',
y = 'padj',
title = 'mTEC-lo vs mTEC-hi gene expression',
pCutoff = 0.0001)
EnhancedVolcano(df,
lab = rownames(df),
selectLab = c('ENSG00000160224.17', 'ENSG00000121594.12'),
x = 'log2FoldChange',
y = 'padj',
title = 'mTEC-lo vs mTEC-hi gene expression',
pCutoff = 0.5)
EnhancedVolcano(df,
lab = rownames(df),
selectLab = c('ENSG00000160224.17', 'ENSG00000121594.12'),
x = 'log2FoldChange',
y = 'padj',
title = 'mTEC-lo vs mTEC-hi gene expression',
pCutoff = 0.9)
EnhancedVolcano(df,
lab = rownames(df),
selectLab = c('ENSG00000160224.17', 'ENSG00000121594.12'),
x = 'log2FoldChange',
y = 'padj',
title = 'mTEC-lo vs mTEC-hi gene expression',
pCutoff = 0.000000001)
EnhancedVolcano(df,
lab = rownames(df),
selectLab = c('ENSG00000160224.17', 'ENSG00000121594.12'),
x = 'log2FoldChange',
y = 'padj',
title = 'mTEC-lo vs mTEC-hi gene expression',
pCutoff = 0.001)
EnhancedVolcano(df,
lab = rownames(df),
selectLab = c('ENSG00000160224.17', 'ENSG00000121594.12'),
x = 'log2FoldChange',
y = 'padj',
title = 'mTEC-lo vs mTEC-hi gene expression',
pCutoff = 0.00001)
EnhancedVolcano(df,
lab = rownames(df),
selectLab = c('ENSG00000160224.17', 'ENSG00000121594.12'),
x = 'log2FoldChange',
y = 'padj',
title = 'mTEC-lo vs mTEC-hi gene expression',
pCutoff = 0.0000001)
EnhancedVolcano(df,
lab = rownames(df),
selectLab = c('ENSG00000160224.17', 'ENSG00000121594.12'),
x = 'log2FoldChange',
y = 'padj',
title = 'mTEC-lo vs mTEC-hi gene expression',
pCutoff = 0.1)
df
EnhancedVolcano(df,
lab = df$GeneSymbol,
x = 'log2FoldChange',
y = 'padj',
title = 'mTEC-lo vs mTEC-hi gene expression',
pCutoff = 0.1)
EnhancedVolcano(df,
lab = df$GeneSymbol,
x = 'log2FoldChange',
selectLab = c('AIRE', 'CD80')
y = 'padj',
title = 'mTEC-lo vs mTEC-hi gene expression',
pCutoff = 0.1)
EnhancedVolcano(df,
lab = df$GeneSymbol,
x = 'log2FoldChange',
selectLab = c('AIRE', 'CD80'),
y = 'padj',
title = 'mTEC-lo vs mTEC-hi gene expression',
pCutoff = 0.1)
filter(df, GeneSymbol == 'CD80')
library(dplyr)
library(readr)
library(tidyr)
library(DESeq2)
## Import count matrix
data = read.table("hi_vs_lo.cntTable",header=T,row.names=1)
## Subset into 'gene' and 'TE' count matrices
gene_data = data[grep("^ENSG",rownames(data)),]
TE_data = data[grepl("^(?!ENSG).*$",rownames(data), perl = TRUE),]
## Filter count matrix to exclude non-expressed genes
min_read = 1
gene_data <- gene_data[apply(gene_data,1,function(x){max(x)}) > min_read,]
## Define sampleInfo
ID = colnames(gene_data)
sampleInfo = data.frame(ID,row.names=colnames(gene_data))
sampleInfo = suppressWarnings(separate(sampleInfo, col = ID, into = c('patient', 'group'), sep = '_'))
## Construct DESeq dataset object
dds <- DESeqDataSetFromMatrix(countData = gene_data, colData = sampleInfo, design = ~group)
dds$groups = relevel(dds$groups,ref="mTEC_lo")
## Run differential expression analysis
dds <- DESeq(dds)
res <- results(dds,independentFiltering=F)
## Transform raw count data
vs_dds <- vst(dds, blind=FALSE)
## Add GTF annotation information to results table
df = as.data.frame(res)
GENCODE_annotation = read.table(file = 'gencode.v38_gene_annotation_table.txt', header = 1)
GENCODE_annotation_subset = select(GENCODE_annotation, -c(Start, End, Strand, Length))
df = cbind(Geneid = rownames(df), df)
df = merge(df, GENCODE_annotation_subset, by = 'Geneid')
## Export
#write.table(res, file="hi_vs_lo_gene_TE_analysis.txt", sep="\t",quote=F)
#resSig <- res[(!is.na(res$padj) & (res$padj < 0.050000) &         (abs(res$log2FoldChange)> 0.000000)), ]
#write.table(resSig, file="hi_vs_lo_sigdiff_gene_TE.txt",sep="\t", quote=F)
filter(df, GeneSymbol == 'CD80')
EnhancedVolcano(df,
lab = df$GeneSymbol,
x = 'log2FoldChange',
selectLab = c('AIRE', 'CD80'),
y = 'padj',
title = 'mTEC-lo vs mTEC-hi gene expression',
pCutoff = 0.1)
View(sampleInfo)
View(sampleInfo)
View(sampleInfo)
View(sampleInfo)
library(dplyr)
library(readr)
library(tidyr)
library(DESeq2)
## Import count matrix
data = read.table("hi_vs_lo.cntTable",header=T,row.names=1)
## Subset into 'gene' and 'TE' count matrices
gene_data = data[grep("^ENSG",rownames(data)),]
TE_data = data[grepl("^(?!ENSG).*$",rownames(data), perl = TRUE),]
## Filter count matrix to exclude non-expressed genes
min_read = 1
gene_data <- gene_data[apply(gene_data,1,function(x){max(x)}) > min_read,]
## Define sampleInfo
ID = colnames(gene_data)
sampleInfo = data.frame(ID,row.names=colnames(gene_data))
sampleInfo = suppressWarnings(separate(sampleInfo, col = ID, into = c('patient', 'group'), sep = '_'))
## Construct DESeq dataset object
dds <- DESeqDataSetFromMatrix(countData = gene_data, colData = sampleInfo, design = ~patient + group)
dds$groups = relevel(dds$groups,ref="mTEC_lo")
## Run differential expression analysis
dds <- DESeq(dds)
res <- results(dds,independentFiltering=F)
## Transform raw count data
vs_dds <- vst(dds, blind=FALSE)
## Add GTF annotation information to results table
df = as.data.frame(res)
GENCODE_annotation = read.table(file = 'gencode.v38_gene_annotation_table.txt', header = 1)
GENCODE_annotation_subset = select(GENCODE_annotation, -c(Start, End, Strand, Length))
df = cbind(Geneid = rownames(df), df)
df = merge(df, GENCODE_annotation_subset, by = 'Geneid')
filter(df, GeneSymbol == 'CD80')
library(dplyr)
library(readr)
library(tidyr)
library(DESeq2)
## Import count matrix
data = read.table("hi_vs_lo.cntTable",header=T,row.names=1)
## Subset into 'gene' and 'TE' count matrices
gene_data = data[grep("^ENSG",rownames(data)),]
TE_data = data[grepl("^(?!ENSG).*$",rownames(data), perl = TRUE),]
## Filter count matrix to exclude non-expressed genes
min_read = 1
gene_data <- gene_data[apply(gene_data,1,function(x){max(x)}) > min_read,]
## Define sampleInfo
ID = colnames(gene_data)
sampleInfo = data.frame(ID,row.names=colnames(gene_data))
sampleInfo = suppressWarnings(separate(sampleInfo, col = ID, into = c('patient', 'group'), sep = '_'))
## Construct DESeq dataset object
dds <- DESeqDataSetFromMatrix(countData = gene_data, colData = sampleInfo, design = ~patient + group)
dds$groups = relevel(dds$groups,ref="lo")
## Run differential expression analysis
dds <- DESeq(dds)
res <- results(dds,independentFiltering=F)
## Transform raw count data
vs_dds <- vst(dds, blind=FALSE)
## Add GTF annotation information to results table
df = as.data.frame(res)
GENCODE_annotation = read.table(file = 'gencode.v38_gene_annotation_table.txt', header = 1)
GENCODE_annotation_subset = select(GENCODE_annotation, -c(Start, End, Strand, Length))
df = cbind(Geneid = rownames(df), df)
df = merge(df, GENCODE_annotation_subset, by = 'Geneid')
EnhancedVolcano(df,
lab = df$GeneSymbol,
x = 'log2FoldChange',
selectLab = c('AIRE', 'CD80'),
y = 'padj',
title = 'mTEC-lo vs mTEC-hi gene expression',
pCutoff = 0.1)
EnhancedVolcano(df,
lab = df$GeneSymbol,
x = 'log2FoldChange',
selectLab = c('AIRE', 'CD80', 'FEZF2'),
y = 'padj',
title = 'mTEC-lo vs mTEC-hi gene expression',
pCutoff = 0.1)
EnhancedVolcano(df,
lab = df$GeneSymbol,
x = 'log2FoldChange',
selectLab = c('AIRE', 'CD80', 'FEZF2'),
y = 'padj',
title = 'mTEC-lo vs mTEC-hi gene expression',
pCutoff = 0.1,
drawConnectors = TRUE)
library(EnhancedVolcano)
EnhancedVolcano(df,
lab = df$GeneSymbol,
x = 'log2FoldChange',
selectLab = c('AIRE', 'CD80', 'FEZF2', 'HLA-DRA'),
y = 'padj',
title = 'mTEC-lo vs mTEC-hi gene expression',
pCutoff = 0.1,
drawConnectors = TRUE)
EnhancedVolcano(df,
lab = df$GeneSymbol,
x = 'log2FoldChange',
selectLab = c('AIRE', 'CD80', 'FEZF2', 'HLA-DRA', 'HLA-DRB1', 'HLA-DQB1'),
y = 'padj',
title = 'mTEC-lo vs mTEC-hi gene expression',
pCutoff = 0.1,
drawConnectors = TRUE)
data = read.table("hi_vs_lo.cntTable",header=T,row.names=1)
group <- factor(c(rep("hi",3),rep("low",3)))
gene_data = data[grep("^ENSG",rownames(data)),]
TE_data = data[grepl("^(?!ENSG).*$",rownames(data), perl = TRUE),]
min_read = 1
gene_data <- gene_data[apply(gene_data,1,function(x){max(x)}) > min_read,
library(dplyr)
library(readr)
library(tidyr)
library(DESeq2)
## Import count matrix
data = read.table("hi_vs_lo.cntTable",header=T,row.names=1)
group <- factor(c(rep("hi",3),rep("low",3)))
## Subset into 'gene' and 'TE' count matrices
gene_data = data[grep("^ENSG",rownames(data)),]
TE_data = data[grepl("^(?!ENSG).*$",rownames(data), perl = TRUE),]
## Filter count matrix to exclude non-expressed genes
min_read = 1
gene_data <- gene_data[apply(gene_data,1,function(x){max(x)}) > min_read,]
ID = colnames(gene_data)
sampleInfo = data.frame(ID,row.names=colnames(gene_data))
sampleInfo = suppressWarnings(separate(sampleInfo, col = ID, into = c('patient', 'group'), sep = '_'))
dds <- DESeqDataSetFromMatrix(countData = gene_data, colData = sampleInfo, design = ~patient + group)
dds$groups = relevel(dds$groups,ref="lo")
library(dplyr)
library(readr)
library(tidyr)
library(DESeq2)
## Import count matrix
data = read.table("hi_vs_lo.cntTable",header=T,row.names=1)
#group <- factor(c(rep("hi",3),rep("low",3)))
## Subset into 'gene' and 'TE' count matrices
gene_data = data[grep("^ENSG",rownames(data)),]
TE_data = data[grepl("^(?!ENSG).*$",rownames(data), perl = TRUE),]
## Filter count matrix to exclude non-expressed genes
min_read = 1
gene_data <- gene_data[apply(gene_data,1,function(x){max(x)}) > min_read,]
## Define sampleInfo
ID = colnames(gene_data)
sampleInfo = data.frame(ID,row.names=colnames(gene_data))
sampleInfo = suppressWarnings(separate(sampleInfo, col = ID, into = c('patient', 'group'), sep = '_'))
## Construct DESeq dataset object
dds <- DESeqDataSetFromMatrix(countData = gene_data, colData = sampleInfo, design = ~patient + group)
dds$group = relevel(dds$group,ref="lo")
## Run differential expression analysis
dds <- DESeq(dds)
res <- results(dds,independentFiltering=F)
## Transform raw count data
vs_dds <- vst(dds, blind=FALSE)
## Add GTF annotation information to results table
df = as.data.frame(res)
GENCODE_annotation = read.table(file = 'gencode.v38_gene_annotation_table.txt', header = 1)
GENCODE_annotation_subset = select(GENCODE_annotation, -c(Start, End, Strand, Length))
df = cbind(Geneid = rownames(df), df)
df = merge(df, GENCODE_annotation_subset, by = 'Geneid')
library(EnhancedVolcano)
EnhancedVolcano(df,
lab = df$GeneSymbol,
x = 'log2FoldChange',
selectLab = c('AIRE', 'CD80', 'FEZF2'),
y = 'padj',
title = 'mTEC-lo vs mTEC-hi gene expression',
pCutoff = 0.1,
drawConnectors = TRUE)
library(ggplot2)
library(EnhancedVolcano)
EnhancedVolcano(df,
lab = df$GeneSymbol,
x = 'log2FoldChange',
selectLab = c('AIRE', 'CD80', 'FEZF2'),
y = 'padj',
title = 'mTEC-lo vs mTEC-hi gene expression',
pCutoff = 0.1,
drawConnectors = TRUE) + theme_classic()
library(EnhancedVolcano)
EnhancedVolcano(df,
lab = df$GeneSymbol,
x = 'log2FoldChange',
selectLab = c('AIRE', 'CD80', 'FEZF2'),
y = 'padj',
title = 'mTEC-lo vs mTEC-hi gene expression',
pCutoff = 0.1,
drawConnectors = TRUE)
EnhancedVolcano(df,
lab = df$GeneSymbol,
x = 'log2FoldChange',
y = 'padj',
title = 'mTEC-lo vs mTEC-hi gene expression',
pCutoff = 0.1,
drawConnectors = TRUE)
EnhancedVolcano(df,
lab = df$GeneSymbol,
x = 'log2FoldChange',
selectLab = c('AIRE', 'CD80', 'FEZF2'),
y = 'padj',
title = 'mTEC-lo vs mTEC-hi gene expression',
pCutoff = 0.1,
drawConnectors = TRUE)
head(df)
df2 = filter(df, Class == 'protein_coding')
EnhancedVolcano(df2,
lab = df$GeneSymbol,
x = 'log2FoldChange',
selectLab = c('AIRE', 'CD80', 'FEZF2'),
y = 'padj',
title = 'mTEC-lo vs mTEC-hi gene expression',
pCutoff = 0.1,
drawConnectors = TRUE)
EnhancedVolcano(df2,
lab = df$GeneSymbol,
x = 'log2FoldChange',
selectLab = c('AIRE', 'CD80', 'FEZF2'),
y = 'padj',
title = 'mTEC-lo vs mTEC-hi gene expression',
pCutoff = 0.1,
drawConnectors = TRUE)
EnhancedVolcano(df2,
lab = df2$GeneSymbol,
x = 'log2FoldChange',
selectLab = c('AIRE', 'CD80', 'FEZF2'),
y = 'padj',
title = 'mTEC-lo vs mTEC-hi gene expression',
pCutoff = 0.1,
drawConnectors = TRUE)
EnhancedVolcano(df2,
lab = df2$GeneSymbol,
x = 'log2FoldChange',
selectLab = c('AIRE', 'CD80', 'FEZF2'),
y = 'padj',
title = 'mTEC-lo vs mTEC-hi gene expression',
pCutoff = 0.1)
ggsave("myplot.svg", width = 8, height = 8, units = "cm")
install.packages('svglite')
library(ggplot2)
library(svglite)
library(EnhancedVolcano)
EnhancedVolcano(df2,
lab = df2$GeneSymbol,
x = 'log2FoldChange',
selectLab = c('AIRE', 'CD80', 'FEZF2'),
y = 'padj',
title = 'mTEC-lo vs mTEC-hi gene expression',
pCutoff = 0.1)
ggsave("myplot.svg", width = 8, height = 8, units = "cm")
ggsave("myplot.png", width = 30, height = 20, units = "cm")
ggsave("lo_vs_hi_volcano_plot.png", width = 10, height = 7, units = "cm")
ggsave("lo_vs_hi_volcano_plot.png", width = 20, height = 10, units = "cm")
ggsave("lo_vs_hi_volcano_plot.png", width = 20, height = 15, units = "cm")
plotPCA(vs_dds, intgroup = 'group') + theme_bw()
ggplot(data = df, aes(x = 'log2FoldChange', y = -log10('padj')))
ggplot(data = df, aes(x = 'log2FoldChange', y = log10('padj')))
df
ggplot(data = df, aes(x = 'log2FoldChange', y = 'padj'))
ggplot(data = df, aes(x = log2FoldChange, y = padj)) +
geom_point()
ggplot(data = df, aes(x = log2FoldChange, y = -log10(padj))) +
geom_point()
ggplot(data = df, aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(alpha = 0.75) +
d
ggplot(data = df, aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(alpha = 0.75)
ggplot(data = df, aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(alpha = 0.6)
ggplot(data = df2, aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(alpha = 0.6)
ggplot(data = df2, aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(alpha = 0.6)
ggplot(data = df2, aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(alpha = 0.6) +
geom_vlin(xintercept = 1, linetype = 'dashed')
ggplot(data = df2, aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(alpha = 0.6) +
geom_vline(xintercept = 1, linetype = 'dashed')
ggplot(data = df2, aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(alpha = 0.6) +
geom_vline(xintercept = c(1, -1), linetype = 'dashed')
ggplot(data = df2, aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(alpha = 0.6) +
geom_vline(xintercept = c(1, -1), linetype = 'dashed') +
geom_hline(yintercept = -log10(0.1), linetype = 'dashed')
ggplot(data = df2, aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(alpha = 0.6) +
geom_vline(xintercept = c(1, -1), linetype = 'dashed') +
geom_hline(yintercept = -log10(0.01), linetype = 'dashed')
ggplot(data = df2, aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(alpha = 0.6) +
geom_vline(xintercept = c(1, -1), linetype = 'dashed') +
geom_hline(yintercept = -log10(0.05), linetype = 'dashed')
ggplot(data = df2, aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(alpha = 0.6) +
geom_vline(xintercept = c(1, -1), linetype = 'dashed') +
geom_hline(yintercept = -log10(0.05), linetype = 'dashed') +
ggtitle('mTEC-lo vs mTEC-hi gene expression')
ggplot(data = df2, aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(alpha = 0.6) +
geom_vline(xintercept = c(1, -1), linetype = 'dashed') +
geom_hline(yintercept = -log10(0.05), linetype = 'dashed') +
ggtitle('mTEC-lo vs mTEC-hi gene expression (protein-coding only)')
ggplot(data = df2, aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(alpha = 0.6) +
geom_vline(xintercept = c(1, -1), linetype = 'dashed') +
geom_hline(yintercept = -log10(0.05), linetype = 'dashed') +
ggtitle('mTEC-lo vs mTEC-hi gene expression', '(protein-coding only)')
ggplot(data = df2, aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(alpha = 0.6) +
geom_vline(xintercept = c(1, -1), linetype = 'dashed') +
geom_hline(yintercept = -log10(0.05), linetype = 'dashed') +
ggtitle('mTEC-lo vs mTEC-hi', '(protein-coding genes only)')
install.packages('ggpubr')
library(ggpubr)
ggplot(data = df2, aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(alpha = 0.6) +
geom_vline(xintercept = c(1, -1), linetype = 'dashed') +
geom_hline(yintercept = -log10(0.05), linetype = 'dashed') +
ggtitle('mTEC-lo vs mTEC-hi', '(protein-coding genes only)') +
theme_pubr()
ggplot(data = df2, aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(alpha = 0.6) +
geom_vline(xintercept = c(1, -1), linetype = 'dashed') +
geom_hline(yintercept = -log10(0.05), linetype = 'dashed') +
ggtitle('mTEC-lo vs mTEC-hi', '(protein-coding genes only)') +
theme_pubclean()
ggplot(data = df2, aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(alpha = 0.6) +
geom_vline(xintercept = c(1, -1), linetype = 'dashed') +
geom_hline(yintercept = -log10(0.05), linetype = 'dashed') +
ggtitle('mTEC-lo vs mTEC-hi', '(protein-coding genes only)') +
theme_classic2()
ggplot(data = df2, aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(alpha = 0.6) +
geom_vline(xintercept = c(1, -1), linetype = 'dashed') +
geom_hline(yintercept = -log10(0.05), linetype = 'dashed') +
ggtitle('mTEC-lo vs mTEC-hi', '(protein-coding genes only)') +
theme_pubr()
ggplot(data = df2, aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(alpha = 0.6) +
geom_vline(xintercept = c(1, -1), linetype = 'dashed') +
geom_hline(yintercept = -log10(0.05), linetype = 'dashed') +
ggtitle('mTEC-lo vs mTEC-hi', '(protein-coding genes only)') +
theme_pubr(panel.grid.major = element_line(color = 'black'))
ggplot(data = df2, aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(alpha = 0.6) +
geom_vline(xintercept = c(1, -1), linetype = 'dashed') +
geom_hline(yintercept = -log10(0.05), linetype = 'dashed') +
ggtitle('mTEC-lo vs mTEC-hi', '(protein-coding genes only)') +
theme(panel.grid.major = element_line(color = 'black'))
ggplot(data = df2, aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(alpha = 0.6) +
geom_vline(xintercept = c(1, -1), linetype = 'dashed') +
geom_hline(yintercept = -log10(0.05), linetype = 'dashed') +
ggtitle('mTEC-lo vs mTEC-hi', '(protein-coding genes only)') +
theme_pubr()
df = mutate(df, significant = case_when(padj < 0.05 ~ TRUE, padj >= 0.05 ~ FALSE))
head(df)
df = mutate(df, significant = case_when(padj < 0.01 ~ TRUE, padj >= 0.01 ~ FALSE))
df2 = filter(df, Class == 'protein_coding')
ggplot(data = df2, aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(alpha = 0.6, color = significant) +
geom_vline(xintercept = c(1, -1), linetype = 'dashed') +
geom_hline(yintercept = -log10(0.05), linetype = 'dashed') +
ggtitle('mTEC-lo vs mTEC-hi', '(protein-coding genes only)') +
theme_pubr()
df2
ggplot(data = df2, aes(x = log2FoldChange, y = -log10(padj), colour = significant)) +
geom_point(alpha = 0.6) +
geom_vline(xintercept = c(1, -1), linetype = 'dashed') +
geom_hline(yintercept = -log10(0.05), linetype = 'dashed') +
ggtitle('mTEC-lo vs mTEC-hi', '(protein-coding genes only)') +
theme_pubr()
