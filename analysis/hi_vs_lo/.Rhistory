%>% print
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by(part, sex) %>%
mutate(total = sum(count),
prop = count / total) %>%
print
submit()
clear()
library(ggplot2)
variantData <- read.delim("http://genomedata.org/gen-viz-workshop/intro_to_ggplot2/ggplot2ExampleData.tsv")
head(variantData)
variantData$tumor_COV <- variantData$tumor_ref_count + variantData$tumor_var_count
p1 <- ggplot(data=variantData, aes(x=tumor_VAF, y=tumor_COV))
p1
p1 = p1 + geom_point()
p1
read.csv(file = '~/Documents/PhD/Schorn_lab/Matty_P/AGO2_KD_#4/Transposition_assay/21-02-25/AGO2_KD_#4_Colony_counts')
df = read.csv(file = '~/Documents/PhD/Schorn_lab/Matty_P/AGO2_KD_#4/Transposition_assay/21-02-25_AGO2_KD_#4_Colony_counts')
df = read.csv(file = '~/Documents/PhD/Schorn_lab/Matty_P/AGO2_KD_#4/Transposition_assay/21-02-25_AGO2_KD_#4_Colony_counts.csv')
df
df = filter(df, Sample != GFP)
filter(df, Sample != 'GFP')
df = filter(df, Sample != 'GFP')
?ggplot
ggplot(data = df, aes(x = Sample, y = Colonies))
ggplot(data = df, aes(x = Sample, y = Colonies, fill = MusD))
ggplot(data = df, aes(x = Sample, y = Colonies, fill = MusD)) +
geom_point()
ggplot(data = df, aes(x = Sample, y = Colonies, fill = MusD)) +
geom_point(position = 'dodge')
?geom_point
ggplot(data = df, aes(x = Sample, y = Colonies, fill = MusD)) +
geom_point(position = 'dodge', position_dodge(width = 5))
ggplot(data = df, aes(x = Sample, y = Colonies, fill = MusD)) +
geom_point(position = 'dodge')
ggplot(data = df, aes(x = Sample, y = Colonies, fill = MusD)) +
geom_col(position = 'dodge')
lapply(.libPaths(), dir)
ggplot(data = df, aes(x = Sample, y = Colonies, fill = MusD)) +
geom_col(position = 'dodge') +
scale_fill_brewer(palette="Set1")
?theme_set
ggplot(data = df, aes(x = Sample, y = Colonies, fill = MusD)) +
geom_col(position = 'dodge') +
scale_fill_brewer(palette="Set1") +
theme_classic()
ggplot(data = df, aes(x = Sample, y = Colonies, fill = MusD)) +
geom_col(position = 'dodge') +
geom_point()
scale_fill_brewer(palette="Set1") +
theme_classic()
ggplot(data = df, aes(x = Sample, y = Colonies, fill = MusD)) +
geom_col(position = 'dodge') +
geom_point() +
scale_fill_brewer(palette="Set1") +
theme_classic()
ggplot(data = df, aes(x = Sample, y = Colonies, fill = MusD)) +
geom_col(position = 'dodge') +
geom_point(position = 'dodge') +
scale_fill_brewer(palette="Set1") +
theme_classic()
library(swirl)
library(BiocSwirl)
load_course()
swirl()
install.packages('pheatmap')
install.packages('BiocManager')
BiocManager::install('DESeq2')
library(pheatmap)
library(DESeq2)
browseVignettes(DESeq2)
browseVignettes('DESeq2')
citation(DESeq2)
citation('DESeq2')
library(swirl)
library(BiocSwirl)
swirl()
110
24
bye()
library(swirl)
library(BiocSwirl)
swirl()
0
bye()
swirl
swilr()
swirl()
bye(0)
bye()
swirl()
24
library(swirl)
library(BiocSwirl)
swirl()
bye()
swirl
swirl()
swirl()
library(swirl)
library(BiocSwirl)
swirl()
res
bye()
swirl()
res_dds
DESeq(dds)
res_dds <- DESeq(dds)
res <- results(res_dds)
head(res)
mcols(res)
summary(res)
res
library(dplyr)
filter(res, padj < 0.1)
type(res)
res
filter(res, padj < 0.1)
class(res)
View(anno_data)
res_sig <- subset(res, padj < 0.1)
?subset
order(res_sig, log2FoldChange)
?order()
?order
play()
res
library(dplyr)
filter(data = res, baseMean > 20)
filter(res, baseMean > 20)
tbl_df(res)
tbl_df(res) %>% filter(baseMean > 20)
tbl_df(res) %>% filter(baseMean < 20)
tbl_df(res) %>% filter(padj < 0.1)
res
plotMA(res)
swirl()
tbl_df(res) %>% filter(basemean < 1) %>% hist(res$pvalue)
tbl_df(res) %>% filter(baseMean < 1) %>% hist(res$pvalue)
tbl_df(res) %>% filter(baseMean < 1) %>% hist()
tbl_df(res) %>% filter(baseMean > 1)
tbl_df(res) %>% filter(baseMean > 1)
libray(ggplot2)
library(ggplot2)
df = tbl_df(res) %>% filter(baseMean > 1)
ggplot(dfm aes(x = padj)) + geom_histogram()
ggplot(df, aes(x = padj)) + geom_histogram()
library(readr)
play()
write_csv(res, 'deseq_example.csv')
write_csv(as.data.frame(res), "deseq_example.csv" )
getwed()
getwd()
df = as.data.frame(res)
rownames(df) <- NULL
df
df = as.data.frame(res)
df
df <- cbind(newColName = rownames(df), df)
rownames(df) <- 1:nrow(df)
df
df
write_csv(df, "deseq_example.csv" )
df %>% rename(newColName = gene)
df %>% rename(gene = newColName)
df
head(dd)
head(df)
names(df)[names(df) == "newColName"] <- "gene"
df
head(df)
write_csv(df, "deseq_example.csv" )
swirl()
skip()
res
df
plotCounts(dds, gene = "IL6")
View(res)
res_shrink <- lfcShrink(res_dds, coef = 'condition_treatment_vs_mock', type = 'apeglm')
res_shrink
plotMA(res_shrink, ylim = c(-5, 5))
plot(res)
plot(data = res)
res
plot(data = res, x = log2FoldChange, y = pvalue)
plot(data = res, x = 'log2FoldChange', y = 'pvalue')
plot(x=res$log2FoldChange, y=-log2(res$padj))
skip()
skip()
skip()
skip()
skip()
swirl()
library(swirl)
library(BiocSwirl)
swirl()
swirl()
colData
dataset
View(colData)
View(colData)
dds <- DESeqDataSetFromMatrix(dataset, colData, design= ~ condition)
head(dataset)
head(assay(dds))
library(dplyr)
keep <- rowSums(counts(dds)) > 1
keep
skip()
skip()
15
sampleDist <- dist(t(assay(dds)))
sampleDist <- dist(t(assay(rlog_dds)))
sampleDist
d
sampleDist
skip
skip()
skip()
skip()
skip()
plotPCA(rlog_dds)
plotPCA(rlog_dds) + theme_classic()
plotPCA(rlog_dds) + theme_minimal()
plotPCA(rlog_dds) + theme_bw()
rlog(dds)
swirl()
swirl()
skip()
?plotCounts()
plotCounts(dds, IL6)
skip()
dds
res
counts(dds, normalized=T)
counts(dds, normalized=TRUE)
counts(dds, normalized=FALSE)
swirl()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
topgenes
topGenes
anno_data
pheatmap(topGenes, annotation_col = anno_data)
skip()
skip()
head(res)
skip()
skip()
skip()
skip()
skip()
library(dplyr)
library(readr)
library(tidyr)
library(DESeq2)
library(reshape2)
library(ggplot2)
library(svglite)
library(ggpubr)
library(ggrepel)
library(gridExtra)
library(pheatmap)
## Set parameters
p_value_cutoff = 0.05
log_fold_change_cutoff = 1
#################################################################
# Differential expression with DESeq2
#################################################################
## Import count matrix
data = read.table("hi_vs_lo.cntTable",header=T,row.names=1)
colnames(data) = c('214_HI', '221_HI', '226_HI', '214_LO', '221_LO', '226_LO')
## Subset into TE count matrix 'TE_data'
TE_data = data[grepl("^(?!ENSG).*$",rownames(data), perl = TRUE),]
## Filter count matrix to exclude non-expressed genes
min_read = 1
TE_data = TE_data[apply(TE_data,1,function(x){max(x)}) > min_read,]
## Define sampleInfo
ID = colnames(TE_data)
sampleInfo = data.frame(ID,row.names=colnames(TE_data))
sampleInfo = suppressWarnings(separate(sampleInfo, col = ID, into = c('patient', 'group'), sep = '_'))
getwd()
setwd("/Users/mpeacey/TE_thymus/analysis/hi_vs_lo")
ls
$ls
library(dplyr)
library(readr)
library(tidyr)
library(DESeq2)
library(reshape2)
library(ggplot2)
library(svglite)
library(ggpubr)
library(ggrepel)
library(gridExtra)
library(pheatmap)
## Set parameters
p_value_cutoff = 0.05
log_fold_change_cutoff = 1
#################################################################
# Differential expression with DESeq2
#################################################################
## Import count matrix
data = read.table("hi_vs_lo.cntTable",header=T,row.names=1)
colnames(data) = c('214_HI', '221_HI', '226_HI', '214_LO', '221_LO', '226_LO')
## Subset into TE count matrix 'TE_data'
TE_data = data[grepl("^(?!ENSG).*$",rownames(data), perl = TRUE),]
## Filter count matrix to exclude non-expressed genes
min_read = 1
TE_data = TE_data[apply(TE_data,1,function(x){max(x)}) > min_read,]
ID = colnames(TE_data)
sampleInfo = data.frame(ID,row.names=colnames(TE_data))
sampleInfo = suppressWarnings(separate(sampleInfo, col = ID, into = c('patient', 'group'), sep = '_'))
## Construct DESeq dataset object
dds <- DESeqDataSetFromMatrix(countData = TE_data, colData = sampleInfo, design = ~patient + group)
dds$group = relevel(dds$group,ref="LO")
## Run differential expression analysis
dds <- DESeq(dds)
res <- results(dds,independentFiltering=F)
results_df = as.data.frame(res)
results_df = cbind(ID = rownames(results_df), results_df)
results_df = separate(data = results_df, col = 'ID', into = c('gene', 'family', 'class'), sep = ':')
results_df = cbind(ID = rownames(results_df), results_df)
results_df = mutate(results_df, significant = case_when((padj < p_value_cutoff) & (abs(log2FoldChange) > log_fold_change_cutoff) ~ TRUE,
(padj >= p_value_cutoff) | (abs(log2FoldChange) <= log_fold_change_cutoff) ~ FALSE))
results_df = mutate(results_df, abs_log2FoldChange = abs(log2FoldChange))
sig_results_df = results_df[results_df$significant == TRUE,]
vs_dds <- vst(dds, blind=FALSE)
normalized_counts = as.data.frame(assay(vs_dds))
sigGenes = rownames(results_df[results_df$significant == TRUE,])
sig_normalized_counts = assay(vs_dds)[rownames(normalized_counts) %in% sigGenes,]
counts(dds, normalized = TRUE)
View(normalized_counts)
View(normalized_counts)
library(dplyr)
library(readr)
library(tidyr)
library(DESeq2)
library(reshape2)
library(ggplot2)
library(svglite)
library(ggpubr)
library(ggrepel)
library(gridExtra)
library(pheatmap)
## Set parameters
p_value_cutoff = 0.05
log_fold_change_cutoff = 1
#################################################################
# Differential expression with DESeq2
#################################################################
## Import count matrix
data = read.table("hi_vs_lo.cntTable",header=T,row.names=1)
colnames(data) = c('214_HI', '221_HI', '226_HI', '214_LO', '221_LO', '226_LO')
## Subset into TE count matrix 'TE_data'
TE_data = data[grepl("^(?!ENSG).*$",rownames(data), perl = TRUE),]
## Filter count matrix to exclude non-expressed genes
min_read = 1
TE_data = TE_data[apply(TE_data,1,function(x){max(x)}) > min_read,]
## Define sampleInfo
ID = colnames(TE_data)
sampleInfo = data.frame(ID,row.names=colnames(TE_data))
sampleInfo = suppressWarnings(separate(sampleInfo, col = ID, into = c('patient', 'group'), sep = '_'))
## Construct DESeq dataset object
dds <- DESeqDataSetFromMatrix(countData = TE_data, colData = sampleInfo, design = ~patient + group)
dds$group = relevel(dds$group,ref="LO")
## Run differential expression analysis
dds <- DESeq(dds)
res <- results(dds,independentFiltering=F)
## Convert results to dataframe and add signficance label
results_df = as.data.frame(res)
results_df = cbind(ID = rownames(results_df), results_df)
results_df = separate(data = results_df, col = 'ID', into = c('gene', 'family', 'class'), sep = ':')
results_df = cbind(ID = rownames(results_df), results_df)
results_df = mutate(results_df, significant = case_when((padj < p_value_cutoff) & (abs(log2FoldChange) > log_fold_change_cutoff) ~ TRUE,
(padj >= p_value_cutoff) | (abs(log2FoldChange) <= log_fold_change_cutoff) ~ FALSE))
results_df = mutate(results_df, abs_log2FoldChange = abs(log2FoldChange))
sig_results_df = results_df[results_df$significant == TRUE,]
## Transform raw count data and convert to dataframe
vs_dds <- vst(dds, blind=FALSE)
transformed_counts = as.data.frame(assay(vs_dds))
sigGenes = rownames(results_df[results_df$significant == TRUE,])
sig_transformed_counts = assay(vs_dds)[rownames(normalized_counts) %in% sigGenes,]
as.data.farame(counts(dds, normalized = TRUE))
as.data.frame(counts(dds, normalized = TRUE))
normalized_counts = as.data.frame(counts(dds, normalized = TRUE))
normalized_counts_HI = select(normalized_counts, c('214_HI', '221_HI', '226_HI'))
normalized_counts_HI$mean = rowMeans(normalized_counts_HI)
normalized_counts_HI = select(normalized_counts_HI, mean)
View(normalized_counts_HI)
View(normalized_counts_HI)
normalized_counts_HI = cbind(ID = rownames(normalized_counts_HI), normalized_counts_HI)
normalized_counts_HI = separate(data = normalized_counts_HI, col = 'ID', into = c('gene', 'family', 'class'), sep = ':')
normalized_counts_HI = cbind(ID = rownames(normalized_counts_HI), normalized_counts_HI)
test = 'What?'
'?' is in test
'?' %in% test
normalized_counts_HI = mutate(normalized_counts_HI, class = case_when('?' %in% class ~ 'detected'))
normalized_counts = as.data.frame(counts(dds, normalized = TRUE))
normalized_counts_HI = select(normalized_counts, c('214_HI', '221_HI', '226_HI'))
normalized_counts_HI$mean = rowMeans(normalized_counts_HI)
normalized_counts_HI = select(normalized_counts_HI, mean)
normalized_counts_HI = cbind(ID = rownames(normalized_counts_HI), normalized_counts_HI)
normalized_counts_HI = separate(data = normalized_counts_HI, col = 'ID', into = c('gene', 'family', 'class'), sep = ':')
normalized_counts_HI = cbind(ID = rownames(normalized_counts_HI), normalized_counts_HI)
'?' !%in% test
!('?' %in% test)
normalized_counts_HI = mutate(normalized_counts_HI, class = case_when('?' %in% class ~ 'detected',
!('?' %in% class ~ class)))
normalized_counts = as.data.frame(counts(dds, normalized = TRUE))
normalized_counts_HI = select(normalized_counts, c('214_HI', '221_HI', '226_HI'))
normalized_counts_HI$mean = rowMeans(normalized_counts_HI)
normalized_counts_HI = select(normalized_counts_HI, mean)
normalized_counts_HI = cbind(ID = rownames(normalized_counts_HI), normalized_counts_HI)
normalized_counts_HI = separate(data = normalized_counts_HI, col = 'ID', into = c('gene', 'family', 'class'), sep = ':')
normalized_counts_HI = cbind(ID = rownames(normalized_counts_HI), normalized_counts_HI)
normalized_counts_HI = mutate(normalized_counts_HI, class = case_when('?' %in% class ~ 'detected',
!('?' %in% class ~ 'not')))
normalized_counts_HI = mutate(normalized_counts_HI, class = case_when('?' %in% class ~ 'detected',
!('?' %in% class) ~ 'not'))
normalized_counts = as.data.frame(counts(dds, normalized = TRUE))
normalized_counts_HI = select(normalized_counts, c('214_HI', '221_HI', '226_HI'))
normalized_counts_HI$mean = rowMeans(normalized_counts_HI)
normalized_counts_HI = select(normalized_counts_HI, mean)
normalized_counts_HI = cbind(ID = rownames(normalized_counts_HI), normalized_counts_HI)
normalized_counts_HI = separate(data = normalized_counts_HI, col = 'ID', into = c('gene', 'family', 'class'), sep = ':')
normalized_counts_HI = cbind(ID = rownames(normalized_counts_HI), normalized_counts_HI)
normalized_counts_HI = mutate(normalized_counts_HI, class = case_when('?' %in% class ~ 'detected',
!('?' %in% class) ~ class))
'?' in 'DNA?'
'?' %in% 'DNA?'
'?' %in% '?'
'?' %in% 'DNA ?'
str_contains('DNA?', '?')
str_detect()
grepl(?, DNA?)
grepl('?', 'DNA?')
normalized_counts = as.data.frame(counts(dds, normalized = TRUE))
normalized_counts_HI = select(normalized_counts, c('214_HI', '221_HI', '226_HI'))
normalized_counts_HI$mean = rowMeans(normalized_counts_HI)
normalized_counts_HI = select(normalized_counts_HI, mean)
normalized_counts_HI = cbind(ID = rownames(normalized_counts_HI), normalized_counts_HI)
normalized_counts_HI = separate(data = normalized_counts_HI, col = 'ID', into = c('gene', 'family', 'class'), sep = ':')
normalized_counts_HI = cbind(ID = rownames(normalized_counts_HI), normalized_counts_HI)
normalized_counts_HI = mutate(normalized_counts_HI, class = case_when(grepl('?', class) ~ 'detected',
!(grepl('?' class)) ~ class))
normalized_counts_HI = mutate(normalized_counts_HI, class = case_when(grepl('?', class) ~ 'detected'))
as.data.frame(counts(dds, normalized = TRUE)) %>%
select(c('214_HI', '221_HI', '226_HI'))
normalized_counts_HI = as.data.frame(counts(dds, normalized = TRUE)) %>%
select(c('214_HI', '221_HI', '226_HI'))
normalized_counts_HI$mean = rowMeans(normalized_counts_HI)
normalized_counts_HI = select(normalized_counts_HI, mean)
normalized_counts_HI = as.data.frame(counts(dds, normalized = TRUE)) %>%
select(c('214_HI', '221_HI', '226_HI'))
normalized_counts_HI$mean = rowMeans(normalized_counts_HI)
normalized_counts_HI = select(normalized_counts_HI, mean)
normalized_counts_HI = cbind(ID = rownames(normalized_counts_HI), normalized_counts_HI)
normalized_counts_HI = separate(data = normalized_counts_HI, col = 'ID', into = c('gene', 'family', 'class'), sep = ':')
normalized_counts_HI = cbind(ID = rownames(normalized_counts_HI), normalized_counts_HI)
normalized_counts_HI = mutate(normalized_counts_HI, class = sub("?", "", class))
normalized_counts_HI = mutate(normalized_counts_HI, class = sub("?", "_", class))
?sub()
?`sub
d
?sub
sub('?', 'help')
sub('?', 'help', 'What?')
sub('a', 'x', 'what')
sub('a', '?', 'what')
sub('?', 'x', 'wh?t')
sub('?', 'x', 'wh?t')
sub('\?', 'x', 'wh?t')
sub('\\?', 'x', 'wh?t')
normalized_counts_HI = as.data.frame(counts(dds, normalized = TRUE)) %>%
select(c('214_HI', '221_HI', '226_HI'))
normalized_counts_HI$mean = rowMeans(normalized_counts_HI)
normalized_counts_HI = select(normalized_counts_HI, mean)
normalized_counts_HI = cbind(ID = rownames(normalized_counts_HI), normalized_counts_HI)
normalized_counts_HI = separate(data = normalized_counts_HI, col = 'ID', into = c('gene', 'family', 'class'), sep = ':')
normalized_counts_HI = cbind(ID = rownames(normalized_counts_HI), normalized_counts_HI)
normalized_counts_HI = mutate(normalized_counts_HI, class = sub("\\?", "_", class))
normalized_counts_HI = as.data.frame(counts(dds, normalized = TRUE)) %>%
select(c('214_HI', '221_HI', '226_HI'))
normalized_counts_HI$mean = rowMeans(normalized_counts_HI)
normalized_counts_HI = select(normalized_counts_HI, mean)
normalized_counts_HI = cbind(ID = rownames(normalized_counts_HI), normalized_counts_HI)
normalized_counts_HI = separate(data = normalized_counts_HI, col = 'ID', into = c('gene', 'family', 'class'), sep = ':')
normalized_counts_HI = cbind(ID = rownames(normalized_counts_HI), normalized_counts_HI)
normalized_counts_HI = mutate(normalized_counts_HI, class = sub("\\?", "", class))
normalized_counts_HI_class = group_by(normalized_counts_HI, class) %>% summarize(sum = sum(mean))
View(normalized_counts_HI_class)
View(normalized_counts_HI_class)
normalized_counts_HI_class = as.data.frame(normalized_counts_HI_class)
ggplot(normalized_counts_HI_class, aes(x="", y=sum, fill=class)) +
geom_bar(stat="identity", width=1, color = 'white') +
coord_polar("y", start=0) + theme_void()
ggplot(normalized_counts_HI_class, aes(x="", y=sum, fill=class)) +
geom_bar(stat="identity", width=1)
ggplot(normalized_counts_HI_class, aes(x="", y=sum, fill=class)) +
geom_col(poisiton = 'fill')
getwd()
